# Generated by Django 3.0.8 on 2020-07-30 09:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('gender', models.CharField(choices=[('female', 'female'), ('male', 'male')], max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=60)),
            ],
        ),
        migrations.CreateModel(
            name='TagTypeSelection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('charm', models.ManyToManyField(blank=True, related_name='charm_tag_type_selection', to='members.Tag')),
                ('date_style', models.ManyToManyField(blank=True, related_name='date_tag_type_selection', to='members.Tag')),
                ('life_style', models.ManyToManyField(blank=True, related_name='life_tag_type_selection', to='members.Tag')),
                ('relationship_style', models.ManyToManyField(blank=True, related_name='relationship_tag_type_selection', to='members.Tag')),
            ],
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('story', models.CharField(blank=True, choices=[(1, '이상적인 첫 소개팅 장소'), (2, '내 외모중 가장 마음에 드는 곳은'), (3, '남들보다 이것 하나는 자신있어요')], max_length=60)),
                ('content', models.CharField(blank=True, max_length=60)),
                ('created', models.DateTimeField(auto_now=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Star',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('star', models.PositiveIntegerField()),
                ('created', models.DateTimeField(auto_now=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_stars', to=settings.AUTH_USER_MODEL)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partner_stars', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Pick',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pick', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_picks', to=settings.AUTH_USER_MODEL)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partner_picks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MemberRibbon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paid_ribbon', models.IntegerField()),
                ('current_ribbon', models.PositiveIntegerField()),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MemberInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birth', models.DateField(null=True)),
                ('nickname', models.CharField(max_length=60, unique=True)),
                ('job', models.CharField(blank=True, max_length=50)),
                ('company', models.CharField(blank=True, max_length=60)),
                ('school', models.CharField(blank=True, max_length=50)),
                ('region', models.CharField(blank=True, choices=[('seoul', '서울'), ('gyeonggi', '경기'), ('incheon', '인천'), ('daejeon', '대전'), ('chungbuk', '충북'), ('chungnam', '충남'), ('gangwon', '강원'), ('busan', '부산'), ('gyeongbuk', '경북'), ('gyeongnam', '경남'), ('daegu', '대구'), ('ulsan', '울산'), ('gwangju', '광주'), ('jeonbuk', '전북'), ('jeonnam', '전남'), ('jeju', '제주')], max_length=30)),
                ('body_shape', models.CharField(blank=True, choices=[('normal', '보통체형'), ('plump', '통통한'), ('curvy', '살짝볼륨'), ('glamor', '글래머'), ('thin', '마른'), ('slimfirm', '슬림탄탄')], max_length=50)),
                ('major', models.CharField(blank=True, max_length=50)),
                ('tall', models.PositiveIntegerField(blank=True, null=True)),
                ('personality', models.CharField(blank=True, choices=[('intelligent', '지적인'), ('calm', '차분한'), ('humorous', '유머있는'), ('optimistic', '낙천적인'), ('introvert', '내향적인'), ('extrovert', '외향적인'), ('emotional', '감성적인'), ('kind', '상냥한'), ('cute', '귀여운'), ('sexy', '섹시한'), ('unique', '4차원인'), ('cheerful', '발랄한'), ('cool', '도도한')], max_length=60)),
                ('blood_type', models.CharField(blank=True, choices=[('ab', 'AB형'), ('a', 'A형'), ('b', 'B형'), ('o', 'O형')], max_length=30)),
                ('drinking', models.CharField(blank=True, choices=[('sometimes', '가끔 마심'), ('pretty', '어느정도 즐기는편'), ('very', '술자리를 즐김'), ('never', '마시지 않음')], max_length=60)),
                ('smoking', models.CharField(blank=True, choices=[('yes', '흡연'), ('no', '비흡연')], max_length=60)),
                ('religion', models.CharField(blank=True, choices=[('none', '종교 없음'), ('christian', '기독교'), ('catholic', '천주교'), ('buddhism', '불교'), ('wonbuddhism', '원불교'), ('confucian', '유교'), ('islam', '이슬람교')], max_length=60)),
                ('introduce', models.CharField(blank=True, max_length=150)),
                ('member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MemberImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='member_images/>')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='member',
            name='picks',
            field=models.ManyToManyField(related_name='pick_members', through='members.Pick', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='member',
            name='stars',
            field=models.ManyToManyField(related_name='star_members', through='members.Star', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='member',
            name='tag_type_selection',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='members.TagTypeSelection'),
        ),
        migrations.AddField(
            model_name='member',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
